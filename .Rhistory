train[Class == "1"]
# Imbalanced training set modeling
x <- sample(train[Class == 0], 4000)
train[Class == 0]
# Imbalanced training set modeling
x <- sample(train[Class == 0], 4000)
x <- copy(train[Class == 0])
y <- copy(train[Class == 0])
# Imbalanced training set modeling
x <- sample(y, 4000)
# Imbalanced training set modeling
x <- sample(nrow(train[Class == 0]), 4000)
x
# Imbalanced training set modeling
x <- data.table(sample(nrow(train[Class == 0]), 4000))
x
# Imbalanced training set modeling
train[sample(nrow(train[Class == 0]), 4000))]
# Imbalanced training set modeling
train[sample(nrow(train[Class == 0]), 4000)]
# Imbalanced training set modeling
x <- copy(train[sample(nrow(train[Class == 0]), 4000)])
x[Class == 1]
# Imbalanced training set modeling
x <- copy(train[sample(nrow(train[Class == 0]), 4000)])
x[Class == 1]
# Imbalanced training set modeling
class_0 = copy(train[Class == 0])
class_0[Class==1]
class_0[Class==0]
x <- copy(sample(nrow(class_0, 4000)))
x <- copy(sample(nrow(class_0), 4000))
x <- copy(class_0[sample(nrow(class_0), 4000)])
View(x)
x[Class == 1]
imbalanced.train <- rbind(x, train[Class == 1])
View(imbalanced.train)
train.matrix <- model.matrix(formula, imbalanced.train)[, -1]
y.train <- imbalanced.train$Class
imbalanced.fit <- cv.glmnet(train.matrix, y.train, family = "binomial", alpha = 1, nfolds = 10)
# Predicting Downsample test data
downsample.test.predictions <- predict(imbalanced.fit, downsample.test.matrix, s = imbalanced.fit$lambda.min)
predicted.classes <- ifelse(downsample.test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), downsample.test$Class, positive = "1")
#Predicting imbalanced test data
test.predictions <- predict(imbalanced.fit, imbalanced.test.matrix, s = imbalanced.fit$lambda.min)
predicted.classes <- ifelse(test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), test$Class, positive = "1")
confusionMatrix(as.factor(predicted.classes), as.factor(test$Class), positive = "1")
confusionMatrix(as.factor(predicted.classes), test$Class, positive = "1")
predicted.classes <- ifelse(test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), test$Class, positive = "1")
library(data.table)
library(caTools)
library(xgboost)
library(caret)
library(ROCR)
library("pROC")
library("ROSE")
library("magrittr")
library(glmnet)
credit_card_raw <- fread("/Users/jeffrey/Documents/Boston University/BU-QST-Masters/Spring 2020/BA810/Team Project/Data/creditcard.csv")
# Create train and test dataset
credit_card_raw[, test:=0]
credit_card_raw[, "Time":= NULL]
credit_card_raw[sample(nrow(credit_card_raw), 284807*0.2), test:=1]
test <- credit_card_raw[test==1]
train <- credit_card_raw[test==0]
train[, "test" := NULL]
test[, "test" := NULL]
credit_card_raw[, "test" := NULL]
# Convert datatables to dataframes for downsampling
setDF(train)
setDF(test)
# Downsample
set.seed(1)
train$Class <- factor(train$Class)
downsample.train <- downSample(train[, -ncol(train)], train$Class)
test$Class <- factor(test$Class)
downsample.test <- downSample(test[, -ncol(test)], test$Class)
formula <- as.formula(Class ~ .)
# Downsample training set modeling
downsample.train.matrix <- model.matrix(formula, downsample.train)[, -1]
y.downsample.train <- downsample.train$Class
downsample.fit <- cv.glmnet(downsample.train.matrix, y.downsample.train, family = "binomial", alpha = 1, nfolds = 10)
downsample.test.matrix <- model.matrix(formula, downsample.test) [, -1]
imbalanced.test.matrix <- model.matrix(formula, test)[, -1]
# Predicting Downsample test data
downsample.test.predictions <- predict(downsample.fit, downsample.test.matrix, s = downsample.fit$lambda.min)
predicted.classes <- ifelse(downsample.test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), downsample.test$Class, positive = "1")
#Predicting imbalanced test data
test.predictions <- predict(downsample.fit, imbalanced.test.matrix, s = downsample.fit$lambda.min)
predicted.classes <- ifelse(test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), test$Class, positive = "1")
# Imbalanced training set modeling
class_0 = copy(train[Class == 0])
x <- copy(class_0[sample(nrow(class_0), 4000)])
imbalanced.train <- rbind(x, train[Class == 1])
# Imbalanced training set modeling
class_0 = copy(train[Class == 0])
# Imbalanced training set modeling
class_0 = copy(train[as.factor(Class) == 0])
remove(list=ls())
library(data.table)
library(caTools)
library(xgboost)
library(caret)
library(ROCR)
library("pROC")
library("ROSE")
library("magrittr")
library(glmnet)
credit_card_raw <- fread("/Users/jeffrey/Documents/Boston University/BU-QST-Masters/Spring 2020/BA810/Team Project/Data/creditcard.csv")
# Create train and test dataset
credit_card_raw[, test:=0]
credit_card_raw[, "Time":= NULL]
credit_card_raw[sample(nrow(credit_card_raw), 284807*0.2), test:=1]
test <- credit_card_raw[test==1]
train <- credit_card_raw[test==0]
train[, "test" := NULL]
test[, "test" := NULL]
credit_card_raw[, "test" := NULL]
# Convert datatables to dataframes for downsampling
setDF(train)
setDF(test)
# Downsample
set.seed(1)
train$Class <- factor(train$Class)
downsample.train <- downSample(train[, -ncol(train)], train$Class)
test$Class <- factor(test$Class)
downsample.test <- downSample(test[, -ncol(test)], test$Class)
formula <- as.formula(Class ~ .)
# Downsample training set modeling
downsample.train.matrix <- model.matrix(formula, downsample.train)[, -1]
y.downsample.train <- downsample.train$Class
downsample.fit <- cv.glmnet(downsample.train.matrix, y.downsample.train, family = "binomial", alpha = 1, nfolds = 10)
downsample.test.matrix <- model.matrix(formula, downsample.test) [, -1]
imbalanced.test.matrix <- model.matrix(formula, test)[, -1]
# Predicting Downsample test data
downsample.test.predictions <- predict(downsample.fit, downsample.test.matrix, s = downsample.fit$lambda.min)
predicted.classes <- ifelse(downsample.test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), downsample.test$Class, positive = "1")
#Predicting imbalanced test data
test.predictions <- predict(downsample.fit, imbalanced.test.matrix, s = downsample.fit$lambda.min)
predicted.classes <- ifelse(test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), test$Class, positive = "1")
class_0 = copy(train[Class == 0])
x <- copy(class_0[sample(nrow(class_0), 4000)])
imbalanced.train <- rbind(x, train[Class == 1])
train[Class == 0]
train <- credit_card_raw[test==0]
train[, "test" := NULL]
class_0 = copy(train[Class == 0])
x <- copy(class_0[sample(nrow(class_0), 4000)])
# Imbalanced training set modeling
class_0 = copy(train[Class == 0])
# Imbalanced training set modeling
class_0 = copy(train[Class == 0,])
train
train[Class==1]
train[train$Class ==1]
train[Class==0,]
train[train$Class ==0,]
class_0 = copy(train[train$Class == 0,])
x <- copy(class_0[sample(nrow(class_0), 4000)])
imbalanced.train <- rbind(x, train[Class == 1])
x <- copy(class_0[sample(nrow(class_0), 4000),])
imbalanced.train <- rbind(x, train[Class == 1])
imbalanced.train <- rbind(x, train[train$Class == 1,])
train.matrix <- model.matrix(formula, imbalanced.train)[, -1]
y.train <- imbalanced.train$Class
imbalanced.fit <- cv.glmnet(train.matrix, y.train, family = "binomial", alpha = 1, nfolds = 10)
View(imbalanced.fit)
# Predicting Downsample test data
downsample.test.predictions <- predict(imbalanced.fit, downsample.test.matrix, s = imbalanced.fit$lambda.min)
predicted.classes <- ifelse(downsample.test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), downsample.test$Class, positive = "1")
#Predicting imbalanced test data
test.predictions <- predict(imbalanced.fit, imbalanced.test.matrix, s = imbalanced.fit$lambda.min)
predicted.classes <- ifelse(test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), test$Class, positive = "1")
remove(list=ls())
library(data.table)
library(caTools)
library(xgboost)
library(caret)
library(ROCR)
library("pROC")
library("ROSE")
library("magrittr")
library(glmnet)
credit_card_raw <- fread("/Users/jeffrey/Documents/Boston University/BU-QST-Masters/Spring 2020/BA810/Team Project/Data/creditcard.csv")
# Create train and test dataset
credit_card_raw[, test:=0]
credit_card_raw[, "Time":= NULL]
credit_card_raw[sample(nrow(credit_card_raw), 284807*0.2), test:=1]
test <- credit_card_raw[test==1]
train <- credit_card_raw[test==0]
train[, "test" := NULL]
test[, "test" := NULL]
credit_card_raw[, "test" := NULL]
# Convert datatables to dataframes for downsampling
setDF(train)
setDF(test)
# Downsample
set.seed(1)
train$Class <- factor(train$Class)
downsample.train <- downSample(train[, -ncol(train)], train$Class)
test$Class <- factor(test$Class)
downsample.test <- downSample(test[, -ncol(test)], test$Class)
formula <- as.formula(Class ~ .)
# Downsample training set modeling
downsample.train.matrix <- model.matrix(formula, downsample.train)[, -1]
y.downsample.train <- downsample.train$Class
downsample.fit <- cv.glmnet(downsample.train.matrix, y.downsample.train, family = "binomial", alpha = 1, nfolds = 10)
downsample.test.matrix <- model.matrix(formula, downsample.test) [, -1]
imbalanced.test.matrix <- model.matrix(formula, test)[, -1]
# Predicting Downsample test data
downsample.test.predictions <- predict(downsample.fit, downsample.test.matrix, s = downsample.fit$lambda.min)
predicted.classes <- ifelse(downsample.test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), downsample.test$Class, positive = "1")
#Predicting imbalanced test data
test.predictions <- predict(downsample.fit, imbalanced.test.matrix, s = downsample.fit$lambda.min)
predicted.classes <- ifelse(test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), test$Class, positive = "1")
# Imbalanced training set modeling
class_0 = copy(train[train$Class == 0,])
x <- copy(class_0[sample(nrow(class_0), 4000),])
imbalanced.train <- rbind(x, train[train$Class == 1,])
train.matrix <- model.matrix(formula, imbalanced.train)[, -1]
y.train <- imbalanced.train$Class
imbalanced.fit <- cv.glmnet(train.matrix, y.train, family = "binomial", alpha = 1, nfolds = 10)
# Predicting Downsample test data
downsample.test.predictions <- predict(imbalanced.fit, downsample.test.matrix, s = imbalanced.fit$lambda.min)
predicted.classes <- ifelse(downsample.test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), downsample.test$Class, positive = "1")
#Predicting imbalanced test data
test.predictions <- predict(imbalanced.fit, imbalanced.test.matrix, s = imbalanced.fit$lambda.min)
predicted.classes <- ifelse(test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), test$Class, positive = "1")
downsample.test.predictions <- predict(downsample.fit, downsample.test.matrix, s = downsample.fit$lambda.min)
predicted.classes <- ifelse(downsample.test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), downsample.test$Class, positive = "1")
roc.curve(downsample.test, predicted.classes, plotit = TRUE)
downsample.test.predictions <- predict(downsample.fit, downsample.test.matrix, s = downsample.fit$lambda.min)
predicted.classes <- ifelse(downsample.test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), downsample.test$Class, positive = "1")
roc.curve(downsample.test$Class, predicted.classes, plotit = TRUE)
# Predicting imbalanced test data
test.predictions <- predict(downsample.fit, imbalanced.test.matrix, s = downsample.fit$lambda.min)
predicted.classes <- ifelse(test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), test$Class, positive = "1")
roc.curve(test$Class, predicted.classes, plotit = TRUE)
# Predicting imbalanced test data
test.predictions <- predict(downsample.fit, imbalanced.test.matrix, s = downsample.fit$lambda.min)
predicted.classes <- ifelse(test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), test$Class, positive = "1")
roc.curve(as.factor(test$Class), predicted.classes, plotit = TRUE)
roc.curve(as.numeric(test$Class), predicted.classes, plotit = TRUE)
roc.curve(as.numeric(test$Class), as.numeric(predicted.classes), plotit = TRUE)
downsample.test.predictions <- predict(downsample.fit, downsample.test.matrix, s = downsample.fit$lambda.min)
predicted.classes <- ifelse(downsample.test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), downsample.test$Class, positive = "1")
roc.curve(as.numeric(downsample.test$Class), as.numeric(predicted.classes), plotit = TRUE)
# Predicting imbalanced test data
test.predictions <- predict(downsample.fit, imbalanced.test.matrix, s = downsample.fit$lambda.min)
predicted.classes <- ifelse(test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), test$Class, positive = "1")
roc.curve(as.numeric(test$Class), as.numeric(predicted.classes), plotit = TRUE)
# Predicting Downsample test data
downsample.test.predictions <- predict(imbalanced.fit, downsample.test.matrix, s = imbalanced.fit$lambda.min)
predicted.classes <- ifelse(downsample.test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), downsample.test$Class, positive = "1")
roc.curve(as.numeric(downsample.test$Class), as.numeric(predicted.classes), plotit = TRUE)
#Predicting imbalanced test data
test.predictions <- predict(imbalanced.fit, imbalanced.test.matrix, s = imbalanced.fit$lambda.min)
predicted.classes <- ifelse(test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), test$Class, positive = "1")
roc.curve(as.numeric(test$Class), as.numeric(predicted.classes), plotit = TRUE)
remove(list=ls())
load("~/Documents/Boston University/BU-QST-Masters/Spring 2020/BA810/Team Project/Data/creditcard.csv")
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(caTools)
library(xgboost)
library(caret)
library(ROCR)
library(pROC)
library(ROSE)
library(randomForest)
library(ggplot2)
library(dplyr)
library(solitude)
credit_card_raw = fread("creditcard.csv")
```{r}
library(data.table)
library(caTools)
library(xgboost)
library(caret)
library(ROCR)
library(pROC)
library(ROSE)
library(randomForest)
library(ggplot2)
library(dplyr)
library(solitude)
# credit_card_raw = fread("creditcard.csv")
credit_card_raw = fread("/Users/jeffrey/Documents/Boston University/BU-QST-Masters/Spring 2020/BA810/Team Project/Data/creditcard.csv")
# Create train and test dataset
credit_card_raw[, test:=0]
credit_card_raw[, "Time":= NULL]
credit_card_raw[sample(nrow(credit_card_raw), 284807*0.2), test:=1]
test <- credit_card_raw[test==1]
train <- credit_card_raw[test==0]
train[, "test" := NULL]
test[, "test" := NULL]
credit_card_raw[, "test" := NULL]
# Convert datatables to dataframes for downsampling
setDF(train)
setDF(test)
# Downsample
set.seed(1)
train$Class <- factor(train$Class)
downsample.train <- downSample(train[, -ncol(train)], train$Class)
test$Class <- factor(test$Class)
downsample.test <- downSample(test[, -ncol(test)], test$Class)
# Create formula
formula <- as.formula(Class ~ .)
# Downsample training set modeling
downsample.train.matrix <- model.matrix(formula, downsample.train)[, -1]
y.downsample.train <- downsample.train$Class
downsample.fit <- cv.glmnet(downsample.train.matrix, y.downsample.train, family = "binomial", alpha = 1, nfolds = 10)
# Create testing matrices
downsample.test.matrix <- model.matrix(formula, downsample.test) [, -1]
imbalanced.test.matrix <- model.matrix(formula, test)[, -1]
# Predicting Downsample test data
downsample.test.predictions <- predict(downsample.fit, downsample.test.matrix, s = downsample.fit$lambda.min)
predicted.classes <- ifelse(downsample.test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), downsample.test$Class, positive = "1")
roc.curve(as.numeric(downsample.test$Class), as.numeric(predicted.classes), plotit = TRUE)
# Predicting imbalanced test data
test.predictions <- predict(downsample.fit, imbalanced.test.matrix, s = downsample.fit$lambda.min)
predicted.classes <- ifelse(test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), test$Class, positive = "1")
roc.curve(as.numeric(test$Class), as.numeric(predicted.classes), plotit = TRUE)
# Imbalanced training set modeling
class_0 = copy(train[train$Class == 0,])
x <- copy(class_0[sample(nrow(class_0), 4000),])
imbalanced.train <- rbind(x, train[train$Class == 1,])
train.matrix <- model.matrix(formula, imbalanced.train)[, -1]
y.train <- imbalanced.train$Class
imbalanced.fit <- cv.glmnet(train.matrix, y.train, family = "binomial", alpha = 1, nfolds = 10)
# Predicting Downsample test data
downsample.test.predictions <- predict(imbalanced.fit, downsample.test.matrix, s = imbalanced.fit$lambda.min)
predicted.classes <- ifelse(downsample.test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), downsample.test$Class, positive = "1")
roc.curve(as.numeric(downsample.test$Class), as.numeric(predicted.classes), plotit = TRUE)
#Predicting imbalanced test data
test.predictions <- predict(imbalanced.fit, imbalanced.test.matrix, s = imbalanced.fit$lambda.min)
predicted.classes <- ifelse(test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), test$Class, positive = "1")
roc.curve(as.numeric(test$Class), as.numeric(predicted.classes), plotit = TRUE)
fig(12, 8)
library(data.table)
library(caTools)
library(xgboost)
library(caret)
library(ROCR)
library(pROC)
library(ROSE)
library(randomForest)
library(ggplot2)
library(dplyr)
library(solitude)
library(ggplot2)
credit_card_raw = fread("creditcard.csv")
library(data.table)
library(caTools)
library(xgboost)
library(caret)
library(ROCR)
library(pROC)
library(ROSE)
library(randomForest)
library(ggplot2)
library(dplyr)
library(solitude)
library(ggplot2)
#credit_card_raw = fread("creditcard.csv")
credit_card_raw = fread("/Users/jeffrey/Documents/Boston University/BU-QST-Masters/Spring 2020/BA810/Team Project/Data/creditcard.csv")
fig(12, 8)
fig(12, 8)
fig(12, 8)
fig(12, 8)
#fig(12, 8)
common_theme <- theme(plot.title = element_text(hjust = 0.5, face = "bold"))
ggplot(data = credit_card_raw, aes(x = factor(Class),
y = prop.table(stat(count)), fill = factor(Class),
label = scales::percent(prop.table(stat(count))))) +
geom_bar(position = "dodge") +
geom_text(stat = 'count',
position = position_dodge(.9),
vjust = -0.5,
size = 3) +
scale_x_discrete(labels = c("no fraud", "fraud"))+
scale_y_continuous(labels = scales::percent)+
labs(x = 'Class', y = 'Percentage') +
ggtitle("Distribution of class labels") +
common_theme
ggplot(data=dd,aes(x = Time, fill = factor(Class))) + geom_histogram(bins = 100)+
labs(x = ‘Time in seconds since first transaction’, y = ‘No. of transactions’) +
ggplot(data=dd,aes(x = Time, fill = factor(Class))) + geom_histogram(bins = 100)+
labs(x = "Time in seconds since first transaction", y = "No. of transactions") +
ggtitle(‘Distribution of time of transaction by class’) +
ggplot(data=dd,aes(x = Time, fill = factor(Class))) + geom_histogram(bins = 100)+
labs(x = "Time in seconds since first transaction", y = "No. of transactions") +
ggtitle("Distribution of time of transaction by class") +
facet_grid(Class ~ ., scales = "free_y") + common_theme
ggplot(data=credit_card_raw, aes(x = Time, fill = factor(Class))) + geom_histogram(bins = 100)+
labs(x = "Time in seconds since first transaction", y = "No. of transactions") +
ggtitle("Distribution of time of transaction by class") +
facet_grid(Class ~ ., scales = "free_y") + common_theme
#histogram
fraud_amount <- credit_card_raw[Class == 1]
ggplot(fraud_amount, aes(as.integer(fraud_amount$Amount))) + geom_histogram()
#cumulative distribution
ggplot(fraud_amount, aes(as.integer(fraud_amount$Amount))) + stat_ecdf() + scale_y_continuous(“Pr[fraud_amount < Y]“)
#histogram
fraud_amount <- credit_card_raw[Class == 1]
ggplot(fraud_amount, aes(as.integer(fraud_amount$Amount))) + geom_histogram() +
labs(x = "Fraud Amount ($ dollars)", y = "Transaction Count") +
ggtitle("Distribution of Fraud Amount") +
#histogram
fraud_amount <- credit_card_raw[Class == 1]
ggplot(fraud_amount, aes(as.integer(fraud_amount$Amount))) + geom_histogram() +
labs(x = "Fraud Amount ($ dollars)", y = "Transaction Count") +
ggtitle("Distribution of Fraud Amount")
#histogram
fraud_amount <- credit_card_raw[Class == 1]
ggplot(fraud_amount, aes(as.integer(fraud_amount$Amount))) + geom_histogram() +
labs(x = "Fraud Amount ($ dollars)", y = "Transaction Count") +
ggtitle("Distribution of Fraud Amount") +
facet_grid(Class ~ ., scales = "free_y") + common_theme
# Create formula
formula <- as.formula(Class ~ .)
# Downsample training set modeling
downsample.train.matrix <- model.matrix(formula, downsample.train)[, -1]
y.downsample.train <- downsample.train$Class
downsample.fit <- cv.glmnet(downsample.train.matrix, y.downsample.train, family = "binomial", alpha = 1, nfolds = 10)
# Create testing matrices
downsample.test.matrix <- model.matrix(formula, downsample.test) [, -1]
imbalanced.test.matrix <- model.matrix(formula, test)[, -1]
# Predicting Downsample test data
downsample.test.predictions <- predict(downsample.fit, downsample.test.matrix, s = downsample.fit$lambda.min)
predicted.classes <- ifelse(downsample.test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), downsample.test$Class, positive = "1")
roc.curve(as.numeric(downsample.test$Class), as.numeric(predicted.classes), plotit = TRUE)
# Predicting imbalanced test data
test.predictions <- predict(downsample.fit, imbalanced.test.matrix, s = downsample.fit$lambda.min)
predicted.classes <- ifelse(test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), test$Class, positive = "1")
roc.curve(as.numeric(test$Class), as.numeric(predicted.classes), plotit = TRUE)
# Imbalanced training set modeling
class_0 = copy(train[train$Class == 0,])
x <- copy(class_0[sample(nrow(class_0), 4000),])
imbalanced.train <- rbind(x, train[train$Class == 1,])
train.matrix <- model.matrix(formula, imbalanced.train)[, -1]
y.train <- imbalanced.train$Class
imbalanced.fit <- cv.glmnet(train.matrix, y.train, family = "binomial", alpha = 1, nfolds = 10)
# Predicting Downsample test data
downsample.test.predictions <- predict(imbalanced.fit, downsample.test.matrix, s = imbalanced.fit$lambda.min)
predicted.classes <- ifelse(downsample.test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), downsample.test$Class, positive = "1")
roc.curve(as.numeric(downsample.test$Class), as.numeric(predicted.classes), plotit = TRUE)
#Predicting imbalanced test data
test.predictions <- predict(imbalanced.fit, imbalanced.test.matrix, s = imbalanced.fit$lambda.min)
predicted.classes <- ifelse(test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), test$Class, positive = "1")
roc.curve(as.numeric(test$Class), as.numeric(predicted.classes), plotit = TRUE)
# Predicting Downsample test data
downsample.test.predictions <- predict(downsample.fit, downsample.test.matrix, s = downsample.fit$lambda.min)
predicted.classes <- ifelse(downsample.test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), downsample.test$Class, positive = "1")
roc.curve(as.numeric(downsample.test$Class), as.numeric(predicted.classes), plotit = TRUE)
# Predicting imbalanced test data
test.predictions <- predict(downsample.fit, imbalanced.test.matrix, s = downsample.fit$lambda.min)
predicted.classes <- ifelse(test.predictions > 0, 1, 0)
confusionMatrix(as.factor(predicted.classes), test$Class, positive = "1")
roc.curve(as.numeric(test$Class), as.numeric(predicted.classes), plotit = TRUE)
View(downsample.fit)
# Create formula
formula <- as.formula(Class ~ .)
# Downsample training set modeling
downsample.train.matrix <- model.matrix(formula, downsample.train)[, -1]
y.downsample.train <- downsample.train$Class
downsample.fit <- cv.glmnet(downsample.train.matrix, y.downsample.train, family = "binomial", alpha = 1, nfolds = 10)
plot(downsample.fit)
# Create testing matrices
downsample.test.matrix <- model.matrix(formula, downsample.test) [, -1]
imbalanced.test.matrix <- model.matrix(formula, test)[, -1]
View(downsample.fit)
View(downsample.test.predictions)
# Create formula
formula <- as.formula(Class ~ .)
# Downsample training set modeling
downsample.train.matrix <- model.matrix(formula, downsample.train)[, -1]
y.downsample.train <- downsample.train$Class
downsample.fit <- cv.glmnet(downsample.train.matrix, y.downsample.train, family = "binomial", alpha = 1, nfolds = 10)
# Create testing matrices
downsample.test.matrix <- model.matrix(formula, downsample.test) [, -1]
imbalanced.test.matrix <- model.matrix(formula, test)[, -1]
